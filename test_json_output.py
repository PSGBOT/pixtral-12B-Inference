import json
import os
import networkx as nx
import argparse
from tqdm import tqdm  # Added tqdm import
from nx_utils.build_nx import read_rel_as_nx
from nx_utils.output_nx import create_new_config_json
from nx_utils.visualize import show_graph


def compare_json_files(file1, file2):
    with open(file1, "r") as f1, open(file2, "r") as f2:
        data1 = json.load(f1)
        data2 = json.load(f2)

    tqdm.write(f"Comparing {os.path.basename(file1)} and {os.path.basename(file2)}...")

    # Helper to normalize kinematic relations for comparison
    def normalize_kinematic_relations(relations_list):
        normalized_set = set()
        for rel in relations_list:
            part0, part1, details = rel
            # Ensure parts are in a consistent order (e.g., alphabetically)
            if part0 > part1:
                part0, part1 = part1, part0
                # Swap descriptions and functions if parts are swapped
                details_copy = details.copy()
                details_copy["part0_desc"], details_copy["part1_desc"] = (
                    details_copy.get("part1_desc", ""),
                    details_copy.get("part0_desc", ""),
                )
                details_copy["part0_function"], details_copy["part1_function"] = (
                    details_copy.get("part1_function", []),
                    details_copy.get("part0_function", []),
                )
                details = details_copy

            # Sort kinematic_joints for consistent comparison
            sorted_joints = tuple(
                sorted(
                    [
                        tuple(sorted(j.items()))
                        for j in details.get("kinematic_joints", [])
                    ]
                )
            )

            # Create a tuple for the relation, including sorted joints and other details
            normalized_set.add(
                (
                    part0,
                    part1,
                    details.get("part0_desc", ""),
                    details.get("part1_desc", ""),
                    tuple(sorted(details.get("part0_function", []))),
                    tuple(sorted(details.get("part1_function", []))),
                    sorted_joints,
                )
            )
        return normalized_set

    # Compare 'part center'
    original_part_center = data1.get("part center", {})
    new_part_center = data2.get("part center", {})

    if original_part_center != new_part_center:
        tqdm.write("Comparison FAILED: Mismatch in 'part center' data.")
        tqdm.write(f"Original part center: {original_part_center}")
        tqdm.write(f"New part center: {new_part_center}")
        return False
    else:
        tqdm.write("Part center data is consistent.")

    # Compare 'kinematic relation'
    original_kr_list = data1.get("kinematic relation", [])
    new_kr_list = data2.get("kinematic relation", [])

    normalized_original_kr = normalize_kinematic_relations(original_kr_list)
    normalized_new_kr = normalize_kinematic_relations(new_kr_list)

    if normalized_original_kr != normalized_new_kr:
        tqdm.write("Comparison FAILED: Mismatch in 'kinematic relation' data.")
        tqdm.write(
            f"Original kinematic relations (normalized): {normalized_original_kr}"
        )
        tqdm.write(f"New kinematic relations (normalized): {normalized_new_kr}")
        return False
    else:
        tqdm.write("Kinematic relation data is consistent.")

    return True


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Prune the kinematic relation generated by VLM"
    )
    parser.add_argument(
        "--dataset_dir", type=str, required=True, help="Path to the PSR dataset"
    )

    args = parser.parse_args()

    sample_list = os.listdir(args.dataset_dir)
    conflict = False
    for sample_name in tqdm(sample_list, desc="Processing samples"):
        tqdm.write(f"Processing {sample_name}...")
        sample_dir = os.path.join(args.dataset_dir, sample_name)
        config_path = os.path.join(sample_dir, "config.json")
        mask_path = os.path.join(sample_dir, "mask0.png")
        src_img_path = os.path.join(sample_dir, "src_img.png")
        with open(config_path, "r") as f:
            psr_dict = json.load(f)
            kr_list = psr_dict["kinematic relation"]
            pos_dict = psr_dict["part center"]
        G = read_rel_as_nx(kr_list, pos_dict, all_rel=True)
        # G = prune_kinematic_relation(G, sample_dir, PSR_KR_CAT)  # prune
        # show_graph(G, src_img_path, mask_path)

        create_new_config_json(sample_dir, G, kr_list, pos_dict)

        # Call the comparison function
        original_config_path = config_path
        new_config_path = os.path.join(sample_dir, "new_config.json")
        conflict = not compare_json_files(original_config_path, new_config_path)
        if conflict:
            print(f"Conflict detected in {sample_name}")
    if not conflict:
        print("No conflict detected.")
